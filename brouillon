from generalFunction import readingFile,graphInit,printMatrice,graphNature,TraceGraph,detectionCycle,adjacency_list,CalculPotentiel,costMargi,costInit,controle_globale
from functionBalasHammer import RemplissageBalas
import numpy as np

dt,commande = readingFile("text.txt")
cout_inti = costInit(np.array(dt))

graphinitial = graphInit(dt,commande)
printMatrice("Affichage du graphe initial:",graphinitial)

sortie = RemplissageBalas(graphinitial)
printMatrice("\nAlgorithme that run now is  form Nord-Ouest:",sortie)

graph, b = graphNature(sortie,graphinitial)
TraceGraph(graph,"initial")

nbrArret,nbreSource,nbreCommande = b[1],len(b[2]),len(b[3])
cycle = detectionCycle(adjacency_list(graph),nbreCommande,nbreSource)

if cycle == [] and nbreCommande + nbreSource == nbrArret + 1:
    print("Le graphe est acyclique et connexe.\nCalcul des potentiels de chaque Source et Commande:\n")
    potentielSourceCommande = CalculPotentiel(graph,b[2],nbrArret,b[3])
    print("Potentiel de chaque Source et Commande du graphe initial:\n",potentielSourceCommande)
    coutMarginaux = costMargi(cout_inti,potentielSourceCommande)
    print("\nCalcul des coûts marginaux:\n",coutMarginaux)
    coutMarginaux,sortie,graph,nbreCommande,nbreSource,graphinitial,nbrArret,cout_inti = controle_globale(coutMarginaux,sortie, graph, nbreCommande, nbreSource, graphinitial, nbrArret, cout_inti)
    TraceGraph(graph,"optimale")
    print("\nLa solution optimale est le graphe suivant :",graph)
#else:




#import numpy as np
from generalFunction import *
from functionBalasHammer import *
# Importation
dt, order = readingFile('text.txt')

graphinit = graphInit(dt,order)

ext = RemplissageBalas(graphinit)

graphPhy, res = graphNature(ext,np.array(dt))

if res[0]:
    print("Le graphe est non dégénéré.\n")
    solution = CalculPotentiel(graphPhy, res[2], res[1], res[3])
    print("solution :",solution)
    print('\ncostInit(np.array(dt) :\n',costInit(np.array(dt)))
    cout_margi = costMargi(costInit(np.array(dt)),solution)

    print("\nCourt Marginaux :\n",cout_margi)

    if np.all(cout_margi >= 0):
        print("Le coût marginal ne contient pas de valeur négative. Donc la solution est optimale")
    else:
        print("La matrice de coût marginal contient au moins une valeur négative.\n Le transport n'est pas optimal. Alors, On Reprendre")

else:
    print("Le graphe est dégénéré.\n")





