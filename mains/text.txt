# Ecriture dans Fichier
def ConversionConnexe(graph,n,m):
    ajoutArret = []
    circuit,formatted,cycle_found = np.empty((n, m), dtype=object), [],[]  # Utilisation de dtype=object pour permettre des tuples de différentes tailles
    # Initialisation du circuit remplir de -1
    for i in range(n):
        for j in range(m):
            circuit[i, j] = (-1, -1)
    for C in graph:
        for S in graph[C]:
            circuit[C,S] = (C,S)
    #Ramener le circuit à un tableau de tableau
    for row in circuit:
        formatted_row = [tuple(cell) for cell in row]
        formatted.append(formatted_row)
    for i in range(len(formatted) - 1):
        for j in range(len(formatted[0]) - 1):
            sub_matrix = [row[j:j+2] for row in formatted[i:i+2]]
            if sub_matrix[1][1] != (-1, -1) and sub_matrix[0][0] != (-1, -1) and sub_matrix[1][0] == (-1,-1):
                # Affectation de la valeur suivante à l'élément en dessous du premier élément de la première ligne
                ajoutArret.append((i+1, sub_matrix[0][0][1]))
    print(ajoutArret ,"type de ajoutArret :",type(ajoutArret))
    return ajoutArret


#############################"
*
########################Adjacence##############################################
edge = [[0, 1, 2, 3, 4, 5, 6], [0, 0, 0, 0, 1, 1, 2], [30, 10, 9, 6, 40, 38, 22]]
graph = {}

n,m = 3, 7

for i in range(len(edge[0])):
    source = edge[1][i]  # Commande
    destination = edge[0][i]  # Source
    if source not in graph:
        graph[source] = [destination]
    else:
        graph[source].append(destination)

##################################################################
import numpy as np
circuit, formatted, cycle_found = np.empty((n, m),
                                           dtype=object), [], []  # Utilisation de dtype=object pour permettre des tuples de différentes tailles
# Initialisation du circuit remplir de -1
for i in range(n):
    for j in range(m):
        circuit[i, j] = (-1, -1)
for C in graph:
    for S in graph[C]:
        circuit[C, S] = (C, S)
# Ramener le circuit à un tableau de tableau
for row in circuit:
    formatted_row = [tuple(cell) for cell in row]
    formatted.append(formatted_row)
print(formatted)

for i in range(3):
    for j in range(4):

        sous_matrice = [row[j:j + 2] for row in formatted[i:i + 2]]
        print("Sous 2 :",sous_matrice)

        if len(sous_matrice) >= 2 and sum(len(ligne) for ligne in sous_matrice) == 4:
            print("sous_matrice",j," :",sous_matrice)
            first_elt,second_elt = sous_matrice[0][0], sous_matrice[1][1]
            if first_elt != (-1,-1) and second_elt!=(-1,-1):
                print("On peut ajouter l'arrête :",sous_matrice,"(source,Commande) : ",(i+1,sous_matrice[0][0][1]))

    #        contient_pas = all(element != (-1, -1) for ligne in sous_matrice for element in ligne)
     #       if contient_pas:
      #          cycle_found.extend(element for ligne in sous_matrice for element in ligne)
#########################################################

    ajoutArret = []
    # Initialisation du circuit remplir de -1
    for i in range(n):
        for j in range(m):
            circuit[i, j] = (-1, -1)
    for C in graph:
        for S in graph[C]:
            circuit[C,S] = (C,S)
    #Ramener le circuit à un tableau de tableau
    for row in circuit:
        formatted_row = [tuple(cell) for cell in row]
        formatted.append(formatted_row)
    for i in range(len(formatted) - 1):
        for j in range(len(formatted[0]) - 1):
            sub_matrix = [row[j:j+2] for row in formatted[i:i+2]]
            if sub_matrix[1][1] != (-1, -1) and sub_matrix[0][0] != (-1, -1) and sub_matrix[1][0] == (-1,-1):
                # Affectation de la valeur suivante à l'élément en dessous du premier élément de la première ligne
                ajoutArret.append((i+1, sub_matrix[0][0][1]))
    print(ajoutArret ,"type de ajoutArret :",type(ajoutArret))